[{"/home/dingo/dev/chicken-management/src/index.js":"1","/home/dingo/dev/chicken-management/src/reportWebVitals.js":"2","/home/dingo/dev/chicken-management/src/App.js":"3","/home/dingo/dev/chicken-management/src/store/actions/actionTypes.js":"4","/home/dingo/dev/chicken-management/src/store/reducers/reducer.js":"5","/home/dingo/dev/chicken-management/src/store/reducers/fixedCostReducer.js":"6","/home/dingo/dev/chicken-management/src/store/reducers/variableCostReducer.js":"7","/home/dingo/dev/chicken-management/src/store/actions/fixedCostActions.js":"8","/home/dingo/dev/chicken-management/src/store/actions/variableCostActions.js":"9","/home/dingo/dev/chicken-management/src/store/actions/index.js":"10","/home/dingo/dev/chicken-management/src/components/NavBar/NavBar.js":"11","/home/dingo/dev/chicken-management/src/components/Modal/Modal.js":"12","/home/dingo/dev/chicken-management/src/components/pages/VariableCostsTable/VariableCostsTable.js":"13","/home/dingo/dev/chicken-management/src/components/VariableCostDetail/VariableCostDetail.js":"14","/home/dingo/dev/chicken-management/src/components/TableTools/TableTools.js":"15","/home/dingo/dev/chicken-management/src/utilities/validation.js":"16","/home/dingo/dev/chicken-management/src/components/LoadData/LoadData.js":"17","/home/dingo/dev/chicken-management/src/components/InputField/InputField.js":"18","/home/dingo/dev/chicken-management/src/components/SelectField/SelectField.js":"19","/home/dingo/dev/chicken-management/src/components/pages/RecipesTable/RecipesTable.js":"20","/home/dingo/dev/chicken-management/src/store/reducers/recipeReducer.js":"21","/home/dingo/dev/chicken-management/src/store/actions/recipeActions.js":"22","/home/dingo/dev/chicken-management/src/components/pages/Recipe/Recipe.js":"23","/home/dingo/dev/chicken-management/src/components/VariableCostPicker/VariableCostPicker.js":"24","/home/dingo/dev/chicken-management/src/utilities/calculation.js":"25","/home/dingo/dev/chicken-management/src/components/CheckboxField/CheckboxField.js":"26"},{"size":935,"mtime":1613837378140,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1609730314020,"results":"29","hashOfConfig":"28"},{"size":787,"mtime":1617401015390,"results":"30","hashOfConfig":"28"},{"size":248,"mtime":1615653734420,"results":"31","hashOfConfig":"28"},{"size":326,"mtime":1615653634440,"results":"32","hashOfConfig":"28"},{"size":378,"mtime":1612127278450,"results":"33","hashOfConfig":"28"},{"size":520,"mtime":1614652775020,"results":"34","hashOfConfig":"28"},{"size":168,"mtime":1612137298360,"results":"35","hashOfConfig":"28"},{"size":2641,"mtime":1614745375360,"results":"36","hashOfConfig":"28"},{"size":301,"mtime":1617486354890,"results":"37","hashOfConfig":"28"},{"size":1472,"mtime":1613520914530,"results":"38","hashOfConfig":"28"},{"size":749,"mtime":1612646927190,"results":"39","hashOfConfig":"28"},{"size":2066,"mtime":1615652257140,"results":"40","hashOfConfig":"28"},{"size":7335,"mtime":1615764020053,"results":"41","hashOfConfig":"28"},{"size":571,"mtime":1615765773163,"results":"42","hashOfConfig":"28"},{"size":906,"mtime":1613249771849,"results":"43","hashOfConfig":"28"},{"size":605,"mtime":1615655048520,"results":"44","hashOfConfig":"28"},{"size":2343,"mtime":1616640459650,"results":"45","hashOfConfig":"28"},{"size":2357,"mtime":1616640450680,"results":"46","hashOfConfig":"28"},{"size":1695,"mtime":1617403681240,"results":"47","hashOfConfig":"28"},{"size":502,"mtime":1615653581240,"results":"48","hashOfConfig":"28"},{"size":2774,"mtime":1617849640290,"results":"49","hashOfConfig":"28"},{"size":11890,"mtime":1617849605420,"results":"50","hashOfConfig":"28"},{"size":6780,"mtime":1617390880540,"results":"51","hashOfConfig":"28"},{"size":742,"mtime":1616280385640,"results":"52","hashOfConfig":"28"},{"size":472,"mtime":1617406911280,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1uyqhfw",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/dingo/dev/chicken-management/src/index.js",[],["113","114"],"/home/dingo/dev/chicken-management/src/reportWebVitals.js",[],"/home/dingo/dev/chicken-management/src/App.js",[],"/home/dingo/dev/chicken-management/src/store/actions/actionTypes.js",[],"/home/dingo/dev/chicken-management/src/store/reducers/reducer.js",[],"/home/dingo/dev/chicken-management/src/store/reducers/fixedCostReducer.js",[],"/home/dingo/dev/chicken-management/src/store/reducers/variableCostReducer.js",[],"/home/dingo/dev/chicken-management/src/store/actions/fixedCostActions.js",[],"/home/dingo/dev/chicken-management/src/store/actions/variableCostActions.js",[],"/home/dingo/dev/chicken-management/src/store/actions/index.js",[],"/home/dingo/dev/chicken-management/src/components/NavBar/NavBar.js",[],"/home/dingo/dev/chicken-management/src/components/Modal/Modal.js",[],"/home/dingo/dev/chicken-management/src/components/pages/VariableCostsTable/VariableCostsTable.js",[],"/home/dingo/dev/chicken-management/src/components/VariableCostDetail/VariableCostDetail.js",["115"],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionCreators from \"../../store/actions\";\nimport classes from \"./VariableCostDetail.module.css\";\nimport close_icon from \"../../img/close_icon.svg\";\nimport { types, units } from \"../../config/units.json\";\nimport InputField from \"../InputField/InputField\";\nimport SelectField from \"../SelectField/SelectField\";\n\nfunction VariableCostDetail(props) {\n  const [isEdit, setIsEdit] = useState(false);\n  const [isNew, setIsNew] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(true);\n  const [isAdvanced, setIsAdvanced] = useState(false);\n  const [availableUnits, setAvailableUnits] = useState([]);\n  const [detail, setDetail] = useState({\n    id: \"0\",\n    description: \"\",\n    unitType: \"\",\n    unitSymbol: \"\",\n    cost: 0,\n  });\n  const [validationErrors, setValidationErrors] = useState({\n    description: false,\n    unitType: false,\n    unitSymbol: false,\n    cost: false,\n  });\n  const [isSaving, setIsSaving] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const isMounted = useRef(false);\n  const isFirstChange = useRef(true);\n\n  const getAvailableUnits = useCallback(() => {\n    let newAvailableUnits = [];\n    units.forEach((unit) => {\n      if (unit.type === detail.unitType) {\n        newAvailableUnits.push(unit.symbol);\n      }\n    });\n    setAvailableUnits(newAvailableUnits);\n  }, [detail.unitType]);\n\n  const onChange = (e) => {\n    setDetail({\n      ...detail,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onValidation = (name, value) => {\n    setValidationErrors({\n      ...validationErrors,\n      [name]: value,\n    });\n  };\n\n  const save = () => {\n    setIsSaving(true);\n    isNew ? _create() : _update();\n  };\n\n  const _create = async () => {\n    const res = await props.actCreateVariableCost(detail);\n    if (res.status >= 200 && res.status < 300) {\n      props.closeModal();\n    } else {\n      setIsSaving(false);\n    }\n  };\n\n  const _update = async () => {\n    const res = await props.actUpdateVariableCost({\n      detail,\n      costs: props.costs,\n    });\n    if (res.status >= 200 && res.status < 300) {\n      props.closeModal();\n    } else {\n      setIsSaving(false);\n    }\n  };\n\n  const _delete = async () => {\n    if (!isDeleting) {\n      setIsDeleting(true);\n      const res = await props.actDeleteVariableCost({\n        id: detail.id,\n        costs: props.costs,\n      });\n      if (res.status >= 200 && res.status < 300) {\n        props.closeModal();\n      } else {\n        setIsDeleting(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (props.data) {\n      setDetail({ ...props.data });\n    } else {\n      setIsEdit(true);\n      setIsNew(true);\n      setValidationErrors({\n        description: true,\n        unitType: true,\n        unitSymbol: true,\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (isMounted.current) {\n      getAvailableUnits();\n      if (!isFirstChange.current) {\n        setDetail({\n          ...detail,\n          unitSymbol: \"\",\n        });\n      }\n      isFirstChange.current = false;\n    }\n  }, [detail.unitType, getAvailableUnits]);\n\n  useEffect(() => {\n    const { description, unitType, unitSymbol, cost } = validationErrors;\n    setIsFormValid(!(description || unitType || unitSymbol || cost));\n    isMounted.current = true;\n  }, [validationErrors]);\n\n  return (\n    <div className={classes.VariableCostDetail}>\n      <form>\n        <div className={classes.closeBtn}>\n          <img\n            alt=\"close\"\n            src={close_icon}\n            className={classes.closeIcon}\n            onClick={props.closeModal}\n          />\n        </div>\n        <div className={classes.idField}>\n          <h2>Id: {detail.id}</h2>\n        </div>\n        <div className={classes.descField}>\n          <InputField\n            label=\"Descripción\"\n            name=\"description\"\n            disabled={!isEdit}\n            value={detail.description}\n            minLength=\"0\"\n            maxLength=\"30\"\n            validations={[\"isNotEmpty\", \"isString\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n        <div className={classes.typeField}>\n          <SelectField\n            label=\"Medida\"\n            name=\"unitType\"\n            disabled={!isEdit}\n            value={detail.unitType}\n            options={types}\n            validations={[\"isNotEmpty\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n        <div className={classes.unitField}>\n          <SelectField\n            label=\"Unidad\"\n            name=\"unitSymbol\"\n            disabled={!isEdit}\n            value={detail.unitSymbol}\n            options={availableUnits}\n            validations={[\"isNotEmpty\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n        <div className={classes.costField}>\n          <InputField\n            type=\"number\"\n            label=\"Costo\"\n            name=\"cost\"\n            disabled={!isEdit}\n            value={detail.cost}\n            min={0}\n            validations={[\"isNumber\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n\n        {isEdit ? (\n          <React.Fragment>\n            <div className={classes.btnArea}>\n              <button\n                type=\"button\"\n                className=\"btn-success\"\n                onClick={save}\n                disabled={!isFormValid || isSaving}\n              >\n                {isSaving ? \"Guardando...\" : \"Guardar\"}\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn-danger\"\n                onClick={() => props.closeModal()}\n              >\n                Cancelar\n              </button>\n            </div>\n            {!isNew ? (\n              <div className={classes.advancedArea}>\n                <p\n                  className={classes.advancedBtn}\n                  onClick={() => setIsAdvanced(!isAdvanced)}\n                >\n                  opciones avanzadas\n                </p>\n                {isAdvanced ? (\n                  <p className={classes.deleteBtn} onClick={_delete}>\n                    Eliminar\n                  </p>\n                ) : null}\n              </div>\n            ) : null}\n          </React.Fragment>\n        ) : (\n          <div className={classes.btnArea}>\n            <button\n              type=\"button\"\n              className={`btn-info ${classes.btnEdit}`}\n              onClick={() => setIsEdit(true)}\n            >\n              Editar\n            </button>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    costs: state.variableCostReducer.costs,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actCreateVariableCost: (payload) =>\n      dispatch(actionCreators.createVariableCost(payload)),\n    actUpdateVariableCost: (payload) =>\n      dispatch(actionCreators.updateVariableCost(payload)),\n    actDeleteVariableCost: (payload) =>\n      dispatch(actionCreators.deleteVariableCost(payload)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VariableCostDetail);\n","/home/dingo/dev/chicken-management/src/components/TableTools/TableTools.js",[],"/home/dingo/dev/chicken-management/src/utilities/validation.js",[],"/home/dingo/dev/chicken-management/src/components/LoadData/LoadData.js",["116","117"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionCreators from \"../../store/actions\";\n\nfunction LoadData(props) {\n  useEffect(() => {\n    props.actReadVariableCosts();\n    props.actReadRecipes()\n  }, []);\n\n  return null;\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actReadVariableCosts: () => dispatch(actionCreators.readVariableCosts()),\n    actReadRecipes: () => dispatch(actionCreators.readRecipes())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadData);\n","/home/dingo/dev/chicken-management/src/components/InputField/InputField.js",["118"],"import classes from \"./InputField.module.css\";\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport * as validate from \"../../utilities/validation\";\n\nexport default function InputField({\n  showLabel = true,\n  label = \"\",\n  type = \"text\",\n  name,\n  placeholder,\n  disabled = false,\n  autoComplete = \"off\",\n  minLength = -1,\n  maxLength = Infinity,\n  min = -Infinity,\n  max = Infinity,\n  value,\n  validations = [],\n  onChange,\n  onValidation,\n}) {\n  const [validationErrors, setValidationErrors] = useState([]);\n  const prevValue = useRef(\"\");\n\n  const onChangeHandler = (e) => {\n    onChange(e);\n  };\n\n  const validateErrors = useCallback(() => {\n    let errors = [];\n    let filteredErrors = [];\n    validations.forEach((validation) => {\n      switch (validation) {\n        case \"isString\":\n          errors = [\n            ...errors,\n            validate[validation](value, minLength, maxLength),\n          ];\n          break;\n\n        case \"isNumber\":\n          errors = [...errors, validate[validation](value, min, max)];\n          break;\n\n        default:\n          errors = [...errors, validate[validation](value)];\n          break;\n      }\n    });\n    filteredErrors = errors.filter((err) => err.length > 0);\n    setValidationErrors(filteredErrors);\n  }, [validations, value, minLength, maxLength, min, max]);\n\n  useEffect(() => {\n    if (value !== prevValue.current) {\n      validateErrors();\n    }\n    prevValue.current = value;\n  }, [value, validateErrors]);\n\n  useEffect(() => {\n    if (validationErrors.length > 0) {\n      onValidation(name, true);\n    } else {\n      onValidation(name, false);\n    }\n  }, [validationErrors, name]);\n\n  return (\n    <div>\n      {showLabel ? (\n        <React.Fragment>\n          <label>{label}</label>\n          <br />\n        </React.Fragment>\n      ) : null}\n      <input\n        type={type}\n        name={name}\n        minLength={minLength}\n        maxLength={maxLength}\n        min={min}\n        max={max}\n        value={value}\n        onChange={onChangeHandler}\n        disabled={disabled}\n        placeholder={placeholder}\n        autoComplete={autoComplete}\n        className={classes.inputField}\n      />\n      {validationErrors.map((error, index) => (\n        <p key={index} className=\"field-error-text\">\n          {error}\n        </p>\n      ))}\n    </div>\n  );\n}\n","/home/dingo/dev/chicken-management/src/components/SelectField/SelectField.js",["119"],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport classes from \"./SelectField.module.css\";\nimport * as validate from \"../../utilities/validation\";\n\nexport default function SelectField({\n  showLabel = true,\n  label = \"\",\n  name,\n  disabled = false,\n  options = [],\n  size = 1,\n  min = -Infinity,\n  max = Infinity,\n  minLength = -1,\n  maxLength = Infinity,\n  value,\n  validations = [],\n  onChange,\n  onValidation,\n}) {\n  const [validationErrors, setValidationErrors] = useState([]);\n  const prevValue = useRef(\"\");\n\n  const onChangeHandler = (e) => {\n    onChange(e);\n  };\n\n  const validateErrors = useCallback(() => {\n    let errors = [];\n    let filteredErrors = [];\n    validations.forEach((validation) => {\n      switch (validation) {\n        case \"isString\":\n          errors = [\n            ...errors,\n            validate[validation](value, minLength, maxLength),\n          ];\n          break;\n\n        case \"isNumber\":\n          errors = [...errors, validate[validation](value, min, max)];\n          break;\n\n        default:\n          errors = [...errors, validate[validation](value)];\n          break;\n      }\n    });\n    filteredErrors = errors.filter((err) => err.length > 0);\n    setValidationErrors(filteredErrors);\n  }, [validations, value, minLength, maxLength, min, max]);\n\n  useEffect(() => {\n    if (value !== prevValue.current) {\n      validateErrors();\n    }\n    prevValue.current = value;\n  }, [value, validateErrors]);\n\n  useEffect(() => {\n    if (validationErrors.length > 0) {\n      onValidation(name, true);\n    } else {\n      onValidation(name, false);\n    }\n  }, [validationErrors, name]);\n\n  return (\n    <div>\n      {showLabel ? (\n        <React.Fragment>\n          <label>{label}</label>\n          <br />\n        </React.Fragment>\n      ) : null}\n      <select\n        name={name}\n        value={value}\n        size={size}\n        onChange={onChangeHandler}\n        disabled={disabled}\n        className={classes.selectField}\n      >\n        <option value=\"\">seleccione...</option>\n        {options.map((option, index) => (\n          <option key={index} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n      {validationErrors.map((error, index) => (\n        <p key={index} className=\"field-error-text\">\n          {error}\n        </p>\n      ))}\n    </div>\n  );\n}\n","/home/dingo/dev/chicken-management/src/components/pages/RecipesTable/RecipesTable.js",[],"/home/dingo/dev/chicken-management/src/store/reducers/recipeReducer.js",[],"/home/dingo/dev/chicken-management/src/store/actions/recipeActions.js",[],"/home/dingo/dev/chicken-management/src/components/pages/Recipe/Recipe.js",["120","121","122"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport classes from \"./Recipe.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actionCreators from \"../../../store/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { units } from \"../../../config/units.json\";\nimport { families, categories } from \"../../../config/recipes.json\";\nimport { calculateSubtotals } from \"../../../utilities/calculation\";\nimport Modal from \"../../Modal/Modal\";\nimport VariableCostPicker from \"../../VariableCostPicker/VariableCostPicker\";\nimport TableTools from \"../../TableTools/TableTools\";\nimport InputField from \"../../InputField/InputField\";\nimport SelectField from \"../../SelectField/SelectField\";\nimport CheckboxField from \"../../CheckboxField/CheckboxField\";\n\nfunction Recipe(props) {\n  const history = useHistory();\n  const [showModal, setShowModal] = useState(false);\n  const [isEdit, setIsEdit] = useState(true);\n  const [isNew, setIsNew] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [costIdToUpdate, setCostIdToUpdate] = useState(0);\n  const [costsData, setCostsData] = useState([]);\n  const [costsUnitSymbol, setCostsUnitSymbol] = useState([]);\n  const [costsQuantity, setCostsQuantity] = useState([]);\n  const [subtotals, setSubtotals] = useState([]);\n  const [totalCost, setTotalCost] = useState(0);\n  const [profit, setProfit] = useState(0);\n  const [profitPercent, setProfitPercent] = useState(0);\n  const [selectedItem, setSelectedItem] = useState({});\n  const [fieldsData, setFieldsData] = useState({\n    description: \"\",\n    instructions: \"\",\n    brief: \"\",\n    category: \"\",\n    family: \"\",\n    price: 0,\n    eShop: false,\n    sale: false,\n  });\n  const [validationErrors, setValidationErrors] = useState({\n    description: false,\n    category: false,\n    family: false,\n    price: false,\n  });\n\n  const onChange = (e) => {\n    let attribute = \"\";\n    if (e.target.type === \"checkbox\") {\n      attribute = \"checked\";\n    } else {\n      attribute = \"value\";\n    }\n    setFieldsData({\n      ...fieldsData,\n      [e.target.name]: e.target[attribute],\n    });\n  };\n\n  const onValidation = (name, value) => {\n    setValidationErrors({ ...validationErrors, [name]: value });\n  };\n\n  const findIndexById = useCallback(\n    (id) => {\n      return costsData.findIndex((item) => item.id == id);\n    },\n    [costsData]\n  );\n\n  const openModal = (isNewCost) => (e) => {\n    if (isNewCost) {\n      setSelectedItem(null);\n    } else {\n      const selectedIndex = findIndexById(e.currentTarget.id);\n      setSelectedItem({\n        description: costsData[selectedIndex].description,\n        unitSymbol: costsUnitSymbol[selectedIndex],\n        quantity: costsQuantity[selectedIndex],\n      });\n      setCostIdToUpdate(e.currentTarget.id);\n    }\n    setShowModal(true);\n  };\n\n  const addCost = (data, unitSymbol, quantity) => {\n    setCostsData([...costsData, data]);\n    setCostsUnitSymbol([...costsUnitSymbol, unitSymbol]);\n    setCostsQuantity([...costsQuantity, quantity]);\n  };\n\n  const updateCost = (costData, costUnitSymbol, costQuantity) => {\n    const indexToUpdate = findIndexById(costIdToUpdate);\n    let newCostsData = [...costsData];\n    let newCostsUnitSymbol = [...costsUnitSymbol];\n    let newCostsQuantity = [...costsQuantity];\n    newCostsData[indexToUpdate] = costData;\n    newCostsUnitSymbol[indexToUpdate] = costUnitSymbol;\n    newCostsQuantity[indexToUpdate] = costQuantity;\n    setCostsData(newCostsData);\n    setCostsUnitSymbol(newCostsUnitSymbol);\n    setCostsQuantity(newCostsQuantity);\n  };\n\n  const removeCost = () => {\n    const indexToRemove = findIndexById(costIdToUpdate);\n    let newCostsData = [...costsData];\n    let newCostsUnitSymbol = [...costsUnitSymbol];\n    let newCostsQuantity = [...costsQuantity];\n    newCostsData.splice(indexToRemove, 1);\n    newCostsUnitSymbol.splice(indexToRemove, 1);\n    newCostsQuantity.splice(indexToRemove, 1);\n    setCostsData(newCostsData);\n    setCostsUnitSymbol(newCostsUnitSymbol);\n    setCostsQuantity(newCostsQuantity);\n  };\n\n  const save = () => {\n    setIsSaving(true);\n    isNew ? _create() : _update();\n  };\n\n  const _create = async () => {\n    const recipeData = { ...fieldsData };\n    const recipeCosts = {\n      costsData,\n      costsUnitSymbol,\n      costsQuantity,\n    };\n    const res = await props.actCreateRecipe({ recipeData, recipeCosts });\n    if (res.status >= 200 && res.status < 300) {\n      setIsSaving(false);\n      history.push(\"/recipes-table\");\n    }\n  };\n\n  const _update = async () => {\n    const res = await props.actUpdateRecipe({\n      recipeData: fieldsData,\n      recipeCosts: { costsData, costsUnitSymbol, costsQuantity },\n    });\n    \n    if (res.status >= 200 && res.status < 300) {\n      setIsSaving(false);\n      history.push(\"/recipes-table\");\n    }\n  };\n\n  useEffect(() => {\n    const { id } = props.match.params;\n    if (id === \"new\") {\n      setIsEdit(true);\n      setIsNew(true);\n      setValidationErrors({\n        description: true,\n        category: true,\n        family: true,\n        price: true,\n      });\n    } else {\n      const recipe = props.recipes.find((item) => item.id == id);\n\n      let newFieldsData = { ...recipe };\n      delete newFieldsData.VariableCosts;\n      setFieldsData({ ...newFieldsData });\n\n      let newCostsData = [];\n      let newCostsUnitSymbol = [];\n      let newCostsQuantity = [];\n      recipe.VariableCosts.forEach((item) => {\n        newCostsUnitSymbol.push(item.RecipeCost.CostUnit);\n        newCostsQuantity.push(item.RecipeCost.CostQuantity);\n        newCostsData.push({\n          id: item.id,\n          description: item.description,\n          unitType: item.unitType,\n          unitSymbol: item.unitSymbol,\n          cost: item.cost,\n          createdAt: item.createdAt,\n          updatedAt: item.updatedAt,\n        });\n        setCostsUnitSymbol([...newCostsUnitSymbol]);\n        setCostsQuantity([...newCostsQuantity]);\n        setCostsData([...newCostsData]);\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    const newSubtotals = calculateSubtotals(\n      units,\n      props.variableCosts,\n      costsData,\n      costsUnitSymbol,\n      costsQuantity\n    );\n    const newTotalCost = newSubtotals.reduce(\n      (acc, value) => acc + parseFloat(value),\n      0\n    );\n    setSubtotals(newSubtotals);\n    setTotalCost(newTotalCost.toFixed(2));\n  }, [costsData, costsUnitSymbol, costsQuantity]);\n\n  useEffect(() => {\n    setProfit(fieldsData.price - totalCost);\n    setProfitPercent(\n      (((fieldsData.price - totalCost) * 100) / fieldsData.price).toFixed(2)\n    );\n  }, [subtotals, totalCost, fieldsData.price]);\n\n  useEffect(() => {\n    const { description, category, family, price } = validationErrors;\n    setIsFormValid(!(description || category || family || price));\n  }, [validationErrors]);\n\n  return (\n    <div>\n      <div className={classes.container}>\n        <header>\n          <InputField\n            showLabel={false}\n            name=\"description\"\n            disabled={!isEdit}\n            placeholder=\"Ingrese el nombre de la receta...\"\n            value={fieldsData.description}\n            validations={[\"isNotEmpty\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </header>\n        <label>Ingredientes</label>\n        <TableTools openAddModal={openModal(true)} />\n        <table>\n          <thead className=\"table-header\">\n            <tr>\n              <th>id</th>\n              <th>descripcion</th>\n              <th>unidad</th>\n              <th>cantidad</th>\n              <th>subtotal</th>\n            </tr>\n          </thead>\n          <tbody>\n            {costsData.map((cost, index) => (\n              <tr key={cost.id} id={cost.id} onClick={openModal(false)}>\n                <td>{cost.id}</td>\n                <td>{cost.description}</td>\n                <td>{costsUnitSymbol[index]}</td>\n                <td>{costsQuantity[index]}</td>\n                <td>{subtotals[index]}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className={classes.inputArea}>\n          <div className={classes.instructions}>\n            <label>Instrucciones</label>\n            <br />\n            <textarea\n              name=\"instructions\"\n              value={fieldsData.instructions}\n              disabled={!isEdit}\n              cols=\"30\"\n              rows=\"10\"\n              onChange={onChange}\n            ></textarea>\n          </div>\n          <div className={classes.brief}>\n            <label>resumen</label>\n            <br />\n            <textarea\n              name=\"brief\"\n              value={fieldsData.brief}\n              disabled={!isEdit}\n              cols=\"30\"\n              rows=\"10\"\n              onChange={onChange}\n            ></textarea>\n          </div>\n          <div className={classes.selectionArea}>\n            <div>\n              <SelectField\n                label=\"Categoría\"\n                name=\"category\"\n                disabled={!isEdit}\n                value={fieldsData.category}\n                options={categories}\n                validations={[\"isNotEmpty\"]}\n                onChange={onChange}\n                onValidation={onValidation}\n              />\n              <SelectField\n                label=\"Familia\"\n                name=\"family\"\n                disabled={!isEdit}\n                value={fieldsData.family}\n                options={families}\n                validations={[\"isNotEmpty\"]}\n                onChange={onChange}\n                onValidation={onValidation}\n              />\n              <InputField\n                label=\"Precio\"\n                name=\"price\"\n                disabled={!isEdit}\n                value={fieldsData.price}\n                min={0}\n                validations={[\"isNotEmpty\", \"isNumber\"]}\n                onChange={onChange}\n                onValidation={onValidation}\n              />\n            </div>\n            <div className={classes.checkboxArea}>\n              <CheckboxField\n                label=\"eShop\"\n                checked={fieldsData.eShop}\n                name=\"eShop\"\n                disabled={!isEdit}\n                onChange={onChange}\n              />\n              <CheckboxField\n                label=\"Oferta\"\n                checked={fieldsData.sale}\n                name=\"sale\"\n                disabled={!isEdit}\n                onChange={onChange}\n              />\n            </div>\n            <div className={classes.lastArea}>\n              <div>\n                <p>Costo: S/{totalCost}</p>\n                <p>Ganancia: S/{profit}</p>\n                <p>Margen: {profitPercent}%</p>\n              </div>\n              <div>\n                <button\n                  className=\"btn-success\"\n                  onClick={save}\n                  disabled={!isFormValid || isSaving}\n                >\n                  Guardar\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Modal show={showModal} closeModal={() => setShowModal(false)}>\n        <VariableCostPicker\n          closeModal={() => setShowModal(false)}\n          addCost={addCost}\n          updateCost={updateCost}\n          removeCost={removeCost}\n          data={selectedItem}\n        />\n      </Modal>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    variableCosts: state.variableCostReducer.costs,\n    recipes: state.recipeReducer.recipes,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actCreateRecipe: (payload) =>\n      dispatch(actionCreators.createRecipe(payload)),\n    actUpdateRecipe: (payload) =>\n      dispatch(actionCreators.updateRecipe(payload)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Recipe);\n","/home/dingo/dev/chicken-management/src/components/VariableCostPicker/VariableCostPicker.js",["123","124","125"],"import React, { useState, useRef, useEffect } from \"react\";\nimport classes from \"./VariableCostPicker.module.css\";\nimport { connect } from \"react-redux\";\nimport { units } from \"../../config/units.json\";\nimport InputField from \"../InputField/InputField\";\nimport SelectField from \"../SelectField/SelectField\";\n\nfunction VariableCostPicker(props) {\n  const [isEdit, setIsEdit] = useState(false);\n  const [isAdvanced, setIsAdvanced] = useState(false);\n  const [isNew, setIsNew] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [filteredCostsNames, setFilteredCostsNames] = useState([]);\n  const [noFilteredCostsNames, setNoFilteredCostsNames] = useState([]);\n  const [selectedCost, setSelectedCost] = useState({});\n  const [unitSymbols, setUnitSymbols] = useState([]);\n  const [fieldsData, setFieldsData] = useState({\n    filterCriteria: \"\",\n    description: \"\",\n    unitSymbol: \"\",\n    quantity: 1,\n  });\n  const [validationErrors, setValidationErrors] = useState({\n    description: false,\n    unitSymbol: false,\n    quantity: false,\n  });\n  const isMounted = useRef(false);\n\n  const onChange = (e) => {\n    setFieldsData({\n      ...fieldsData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onValidation = (name, value) => {\n    setValidationErrors({\n      ...validationErrors,\n      [name]: value,\n    });\n  };\n\n  const save = () => {\n    const costData = props.variableCosts.find(\n      (cost) => cost.description === fieldsData.description\n    );\n    const costUnitSymbol = fieldsData.unitSymbol;\n    const costQuantity = fieldsData.quantity;\n\n    if (isNew) {\n      props.addCost(costData, costUnitSymbol, costQuantity);\n    } else {\n      props.updateCost(costData, costUnitSymbol, costQuantity);\n    }\n    props.closeModal();\n  };\n\n  const remove = () => {\n    props.removeCost();\n  };\n\n  useEffect(() => {\n    if (props.data) {\n      const { description, unitSymbol, quantity } = props.data;\n      setFieldsData({\n        ...fieldsData,\n        description,\n        unitSymbol,\n        quantity,\n      });\n    } else {\n      setIsNew(true);\n      setIsEdit(true);\n      setValidationErrors({\n        description: true,\n        unitSymbol: true,\n        quantity: true,\n      });\n    }\n    let onlyNames = props.variableCosts.map((item) => {\n      return item.description;\n    });\n    setFilteredCostsNames(onlyNames);\n    setNoFilteredCostsNames(onlyNames);\n  }, []);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const regexp = new RegExp(fieldsData.filterCriteria, \"i\");\n      let filteredValues = noFilteredCostsNames.filter((item) =>\n        regexp.test(item)\n      );\n      setFilteredCostsNames(filteredValues);\n    }\n    isMounted.current = true;\n  }, [fieldsData.filterCriteria]);\n\n  useEffect(() => {\n    const selectedItem = props.variableCosts.find(\n      (item) => item.description === fieldsData.description\n    );\n    setSelectedCost(selectedItem);\n  }, [fieldsData.description]);\n\n  useEffect(() => {\n    if (selectedCost) {\n      const availableUnits = [];\n      units.forEach((unit) => {\n        if (unit.type === selectedCost.unitType) {\n          availableUnits.push(unit.symbol);\n        }\n      });\n      setUnitSymbols(availableUnits);\n    }\n  }, [selectedCost]);\n\n  useEffect(() => {\n    const { description, unitSymbol, quantity } = validationErrors;\n    setIsFormValid(!(description || unitSymbol || quantity));\n  }, [validationErrors]);\n\n  return (\n    <div className={classes.container}>\n      <form>\n        <div className={classes.costFilter}>\n          <InputField\n            label=\"Buscar\"\n            name=\"filterCriteria\"\n            disabled={!isEdit}\n            value={fieldsData.filterCriteria}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n        <div className={classes.costList}>\n          <SelectField\n            showLabel={false}\n            name=\"description\"\n            disabled={!isEdit}\n            value={fieldsData.description}\n            options={filteredCostsNames}\n            size={10}\n            validations={[\"isNotEmpty\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n\n        <div>\n          <SelectField\n            label=\"Unidad\"\n            name=\"unitSymbol\"\n            disabled={!isEdit}\n            value={fieldsData.unitSymbol}\n            options={unitSymbols}\n            validations={[\"isNotEmpty\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n\n        <div>\n          <InputField\n            type=\"number\"\n            label=\"Cantidad\"\n            name=\"quantity\"\n            disabled={!isEdit}\n            value={fieldsData.quantity}\n            min={0}\n            validations={[\"isNumber\"]}\n            onChange={onChange}\n            onValidation={onValidation}\n          />\n        </div>\n\n        {isFormValid ? (\n          <div className={classes.brief}>\n            <p>{`${fieldsData.quantity}${fieldsData.unitSymbol} de ${fieldsData.description}`}</p>\n          </div>\n        ) : null}\n\n        {isEdit ? (\n          <React.Fragment>\n            <div>\n              <button\n                type=\"button\"\n                className=\"btn-success\"\n                disabled={!isFormValid}\n                onClick={save}\n              >\n                Guardar\n              </button>\n            </div>\n            <div>\n              <button\n                type=\"button\"\n                className=\"btn-danger\"\n                onClick={() => props.closeModal()}\n              >\n                Cancelar\n              </button>\n            </div>\n            {!isNew ? (\n              <div className={classes.advancedArea}>\n                <p\n                  className={classes.advancedBtn}\n                  onClick={() => setIsAdvanced(!isAdvanced)}\n                >\n                  opciones avanzadas\n                </p>\n                {isAdvanced ? (\n                  <p className={classes.deleteBtn} onClick={remove}>\n                    Eliminar\n                  </p>\n                ) : null}\n              </div>\n            ) : null}\n          </React.Fragment>\n        ) : (\n          <div className={classes.btnEditArea}>\n            <button\n              type=\"button\"\n              className=\"btn-info\"\n              onClick={() => {\n                setIsEdit(true);\n              }}\n            >\n              Editar\n            </button>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    variableCosts: state.variableCostReducer.costs,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VariableCostPicker);\n","/home/dingo/dev/chicken-management/src/utilities/calculation.js",[],"/home/dingo/dev/chicken-management/src/components/CheckboxField/CheckboxField.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":124,"column":6,"nodeType":"132","endLine":124,"endColumn":42,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":8,"nodeType":"136","messageId":"137","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"138","line":9,"column":6,"nodeType":"132","endLine":9,"endColumn":8,"suggestions":"139"},{"ruleId":"130","severity":1,"message":"140","line":67,"column":6,"nodeType":"132","endLine":67,"endColumn":30,"suggestions":"141"},{"ruleId":"130","severity":1,"message":"140","line":66,"column":6,"nodeType":"132","endLine":66,"endColumn":30,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":68,"column":52,"nodeType":"145","messageId":"146","endLine":68,"endColumn":54},{"ruleId":"143","severity":1,"message":"144","line":163,"column":59,"nodeType":"145","messageId":"146","endLine":163,"endColumn":61},{"ruleId":"130","severity":1,"message":"147","line":205,"column":6,"nodeType":"132","endLine":205,"endColumn":49,"suggestions":"148"},{"ruleId":"130","severity":1,"message":"149","line":86,"column":6,"nodeType":"132","endLine":86,"endColumn":8,"suggestions":"150"},{"ruleId":"130","severity":1,"message":"151","line":97,"column":6,"nodeType":"132","endLine":97,"endColumn":33,"suggestions":"152"},{"ruleId":"130","severity":1,"message":"147","line":104,"column":6,"nodeType":"132","endLine":104,"endColumn":30,"suggestions":"153"},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'detail'. Either include it or remove the dependency array. You can also do a functional update 'setDetail(d => ...)' if you only need 'detail' in the 'setDetail' call.","ArrayExpression",["156"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["157"],"React Hook useEffect has a missing dependency: 'onValidation'. Either include it or remove the dependency array. If 'onValidation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["158"],["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'props.variableCosts'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has missing dependencies: 'fieldsData', 'props.data', and 'props.variableCosts'. Either include them or remove the dependency array. You can also do a functional update 'setFieldsData(f => ...)' if you only need 'fieldsData' in the 'setFieldsData' call.",["161"],"React Hook useEffect has a missing dependency: 'noFilteredCostsNames'. Either include it or remove the dependency array.",["162"],["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [detail, detail.unitType, getAvailableUnits]",{"range":"179","text":"180"},"Update the dependencies array to be: [props]",{"range":"181","text":"182"},"Update the dependencies array to be: [validationErrors, name, onValidation]",{"range":"183","text":"184"},{"range":"185","text":"184"},"Update the dependencies array to be: [costsData, costsUnitSymbol, costsQuantity, props.variableCosts]",{"range":"186","text":"187"},"Update the dependencies array to be: [fieldsData, props.data, props.variableCosts]",{"range":"188","text":"189"},"Update the dependencies array to be: [fieldsData.filterCriteria, noFilteredCostsNames]",{"range":"190","text":"191"},"Update the dependencies array to be: [fieldsData.description, props.variableCosts]",{"range":"192","text":"193"},[3194,3230],"[detail, detail.unitType, getAvailableUnits]",[250,252],"[props]",[1644,1668],"[validationErrors, name, onValidation]",[1618,1642],[6488,6531],"[costsData, costsUnitSymbol, costsQuantity, props.variableCosts]",[2420,2422],"[fieldsData, props.data, props.variableCosts]",[2726,2753],"[fieldsData.filterCriteria, noFilteredCostsNames]",[2935,2959],"[fieldsData.description, props.variableCosts]"]